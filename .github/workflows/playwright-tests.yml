name: Playwright Tests with TeamCity Setup
description: Setup TeamCity server and run Playwright tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  setup-teamcity:
    runs-on: ubuntu-latest
    outputs:
      host: ${{ env.HOST }}
      super-user-token: ${{ env.SUPER_USER_TOKEN }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'zulu'

    # Install net-tools for ifconfig command
    - name: Install net-tools
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y net-tools

    - name: Set up host environment variable
      shell: bash
      # Get IP address for container communication
      run: |
        echo "HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)" >> $GITHUB_ENV

    - name: Update config.properties with host
      shell: bash
      run: |
        sed -i "s/^base\.url=.*/base.url=http:\/\/$HOST:8111/" config.properties

    - name: Run TeamCity server
      shell: bash
      run: |
        docker run -u 0 -d --name teamcity-server \
        -v $(pwd)/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
        -v $(pwd)/tmp/teamcity_server/logs:/opt/teamcity/logs \
        -p 8111:8111 \
        jetbrains/teamcity-server:2023.11.1


    - name: Set up TeamCity server
      shell: bash
      # Configure server on first start (accept license, choose database, etc.)
      run: npx playwright test tests/setup/teamcitySetup.spec.ts --project=chromium

    - name: Set up superUserToken environment variable
      shell: bash
      # Extract super user token from server logs
      run: |
        echo "SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token' | tail -n 1 | awk '{print $6}')" >> $GITHUB_ENV
        echo "Super user token: $SUPER_USER_TOKEN"

    - name: Update config.properties with token
      shell: bash
      run: |
        sed -i "s/^superUserToken=.*/superUserToken=$SUPER_USER_TOKEN/" config.properties

  test:
    runs-on: ubuntu-latest
    needs: setup-teamcity
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Update config with TeamCity settings
      shell: bash
      run: |
        sed -i "s/^base\.url=.*/base.url=http:\/\/${{ needs.setup-teamcity.outputs.host }}:8111/" config.properties
        sed -i "s/^superUserToken=.*/superUserToken=${{ needs.setup-teamcity.outputs.super-user-token }}/" config.properties

    - name: Health check TeamCity server
      shell: bash
      run: |
        echo "üîç TeamCity Health Check"
        echo "=========================="
        echo "Host: ${{ needs.setup-teamcity.outputs.host }}:8111"
        echo "Token: ${{ needs.setup-teamcity.outputs.super-user-token }}"
        echo ""
        
        # Check 1: Basic connectivity
        echo "1. Testing basic connectivity..."
        if curl -s --connect-timeout 10 "http://${{ needs.setup-teamcity.outputs.host }}:8111" > /dev/null; then
          echo "‚úÖ Server is reachable"
        else
          echo "‚ùå Cannot connect to server"
          exit 1
        fi
        
        # Check 2: TeamCity API endpoint
        echo "2. Testing TeamCity API endpoint..."
        if curl -s --connect-timeout 10 "http://${{ needs.setup-teamcity.outputs.host }}:8111/app/rest/server" > /dev/null; then
          echo "‚úÖ TeamCity API is accessible"
        else
          echo "‚ùå TeamCity API is not accessible"
          exit 1
        fi
        
        # Check 3: Superuser token authentication
        echo "3. Testing superuser token authentication..."
        AUTH_RESPONSE=$(curl -s --connect-timeout 10 -w "%{http_code}" "http://:${{ needs.setup-teamcity.outputs.super-user-token }}@${{ needs.setup-teamcity.outputs.host }}:8111/app/rest/server" -o /tmp/auth_response.json)
        
        if [ "$AUTH_RESPONSE" = "200" ]; then
          echo "‚úÖ Superuser token authentication successful"
        else
          echo "‚ùå Superuser token authentication failed (HTTP $AUTH_RESPONSE)"
          if [ -f /tmp/auth_response.json ]; then
            echo "Response: $(cat /tmp/auth_response.json)"
          fi
          exit 1
        fi
        
        # Check 4: Test authenticated API endpoint
        echo "4. Testing authenticated API endpoint..."
        PROJECTS_RESPONSE=$(curl -s --connect-timeout 10 -w "%{http_code}" "http://:${{ needs.setup-teamcity.outputs.super-user-token }}@${{ needs.setup-teamcity.outputs.host }}:8111/app/rest/projects" -o /tmp/projects_response.json)
        
        if [ "$PROJECTS_RESPONSE" = "200" ]; then
          echo "‚úÖ Authenticated API endpoint working"
        else
          echo "‚ùå Authenticated API endpoint failed (HTTP $PROJECTS_RESPONSE)"
          if [ -f /tmp/projects_response.json ]; then
            echo "Response: $(cat /tmp/projects_response.json)"
          fi
          exit 1
        fi
        
        # Cleanup
        rm -f /tmp/auth_response.json /tmp/projects_response.json
        
        echo ""
        echo "‚úÖ All health checks passed! TeamCity is ready for testing."
        echo ""
        echo "üöÄ Ready to run tests!"

    - name: Run Playwright tests
      run: npx playwright test
      env:
        HOST: ${{ needs.setup-teamcity.outputs.host }}
        SUPER_USER_TOKEN: ${{ needs.setup-teamcity.outputs.super-user-token }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: |
          playwright-report/
          test-results/
        retention-days: 30

    - name: Upload trace on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-trace
        path: test-results/
        retention-days: 30 